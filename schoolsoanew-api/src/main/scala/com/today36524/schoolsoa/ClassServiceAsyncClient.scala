package com.today36524.schoolsoa

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.dapeng.remoting.BaseCommonServiceClient
        import com.today36524.schoolsoa.ClassServiceCodec._
        import scala.concurrent.{Future, Promise}
        import java.util.function.BiConsumer

        /**
         * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        object ClassServiceAsyncClient extends BaseCommonServiceClient("com.today36524.schoolsoa.service.ClassService", "1.0.0"){

        override def isSoaTransactionalProcess: Boolean = {

          var isSoaTransactionalProcess = false
          
          isSoaTransactionalProcess
        }

        
            /**
            * 

    query class

            **/
            def findClassById(id:String , timeout: Long) : scala.concurrent.Future[com.today36524.schoolsoa.bean.Clazz] = {

            initContext("findClassById");

            try {
              val _responseFuture = sendBaseAsync(findClassById_args(id), new FindClassById_argsSerializer(), new FindClassById_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findClassById_result]]

              val promise = Promise[com.today36524.schoolsoa.bean.Clazz]()

              _responseFuture.whenComplete(new BiConsumer[findClassById_result, Throwable]{

              override def accept(r: findClassById_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def findClassesByGrade(gradeId:String , timeout: Long) : scala.concurrent.Future[List[com.today36524.schoolsoa.bean.Clazz]] = {

            initContext("findClassesByGrade");

            try {
              val _responseFuture = sendBaseAsync(findClassesByGrade_args(gradeId), new FindClassesByGrade_argsSerializer(), new FindClassesByGrade_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findClassesByGrade_result]]

              val promise = Promise[List[com.today36524.schoolsoa.bean.Clazz]]()

              _responseFuture.whenComplete(new BiConsumer[findClassesByGrade_result, Throwable]{

              override def accept(r: findClassesByGrade_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          

      }
      