package com.today36524.schoolsoa

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.dapeng.remoting.BaseCommonServiceClient
        import com.today36524.schoolsoa.GradeServiceCodec._
        import scala.concurrent.{Future, Promise}
        import java.util.function.BiConsumer

        /**
         * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        object GradeServiceAsyncClient extends BaseCommonServiceClient("com.today36524.schoolsoa.service.GradeService", "1.0.0"){

        override def isSoaTransactionalProcess: Boolean = {

          var isSoaTransactionalProcess = false
          
          isSoaTransactionalProcess
        }

        
            /**
            * 

    query grade

            **/
            def findGradeById(id:String , timeout: Long) : scala.concurrent.Future[com.today36524.schoolsoa.bean.Grade] = {

            initContext("findGradeById");

            try {
              val _responseFuture = sendBaseAsync(findGradeById_args(id), new FindGradeById_argsSerializer(), new FindGradeById_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findGradeById_result]]

              val promise = Promise[com.today36524.schoolsoa.bean.Grade]()

              _responseFuture.whenComplete(new BiConsumer[findGradeById_result, Throwable]{

              override def accept(r: findGradeById_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def findGradesBySchool(schoolId:String , timeout: Long) : scala.concurrent.Future[List[com.today36524.schoolsoa.bean.Grade]] = {

            initContext("findGradesBySchool");

            try {
              val _responseFuture = sendBaseAsync(findGradesBySchool_args(schoolId), new FindGradesBySchool_argsSerializer(), new FindGradesBySchool_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findGradesBySchool_result]]

              val promise = Promise[List[com.today36524.schoolsoa.bean.Grade]]()

              _responseFuture.whenComplete(new BiConsumer[findGradesBySchool_result, Throwable]{

              override def accept(r: findGradesBySchool_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          

      }
      