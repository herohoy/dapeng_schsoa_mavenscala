package com.today36524.schoolsoa

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.dapeng.remoting.BaseCommonServiceClient
        import com.today36524.schoolsoa.LessonServiceCodec._

        /**
         * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        object LessonServiceClient extends BaseCommonServiceClient("com.today36524.schoolsoa.service.LessonService", "1.0.0"){

        override def isSoaTransactionalProcess: Boolean = {

          var isSoaTransactionalProcess = false
          
          isSoaTransactionalProcess
        }

        
         /**
         * 

    query lesson

         **/

            def findLessonByName(name:String ) : com.today36524.schoolsoa.bean.Lesson = {

            initContext("findLessonByName");

            try {
              val response = sendBase(findLessonByName_args(name), new FindLessonByName_argsSerializer(), new FindLessonByName_resultSerializer())

              response.success

            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }
            finally {
              destoryContext();
            }
            }
          
         /**
         * 
         **/

            def findAllLessons() : List[com.today36524.schoolsoa.bean.Lesson] = {

            initContext("findAllLessons");

            try {
              val response = sendBase(findAllLessons_args(), new FindAllLessons_argsSerializer(), new FindAllLessons_resultSerializer())

              response.success

            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }
            finally {
              destoryContext();
            }
            }
          

        /**
        * getServiceMetadata
        **/
        @throws[SoaException]
        def getServiceMetadata: String = {
          initContext("getServiceMetadata")
          try {
            val _request = new getServiceMetadata_args()
            val _response = sendBase(_request, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer())
            _response.success
          }catch{
            case e: SoaException => throw e
            case e: TException => throw new SoaException(e)
          }
          finally {
            destoryContext()
          }
        }

        }
      