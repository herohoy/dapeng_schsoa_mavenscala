package com.today36524.schoolsoa

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.dapeng.remoting.BaseCommonServiceClient
        import com.today36524.schoolsoa.StudentServiceCodec._
        import scala.concurrent.{Future, Promise}
        import java.util.function.BiConsumer

        /**
         * Autogenerated by Dapeng-Code-Generator (1.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated

        **/
        object StudentServiceAsyncClient extends BaseCommonServiceClient("com.today36524.schoolsoa.service.StudentService", "1.0.0"){

        override def isSoaTransactionalProcess: Boolean = {

          var isSoaTransactionalProcess = false
          
          isSoaTransactionalProcess
        }

        
            /**
            * 

    query student

            **/
            def findStudentById(id:String , timeout: Long) : scala.concurrent.Future[com.today36524.schoolsoa.bean.Student] = {

            initContext("findStudentById");

            try {
              val _responseFuture = sendBaseAsync(findStudentById_args(id), new FindStudentById_argsSerializer(), new FindStudentById_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findStudentById_result]]

              val promise = Promise[com.today36524.schoolsoa.bean.Student]()

              _responseFuture.whenComplete(new BiConsumer[findStudentById_result, Throwable]{

              override def accept(r: findStudentById_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def findStudentsByClass(classId:String , timeout: Long) : scala.concurrent.Future[List[com.today36524.schoolsoa.bean.Student]] = {

            initContext("findStudentsByClass");

            try {
              val _responseFuture = sendBaseAsync(findStudentsByClass_args(classId), new FindStudentsByClass_argsSerializer(), new FindStudentsByClass_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findStudentsByClass_result]]

              val promise = Promise[List[com.today36524.schoolsoa.bean.Student]]()

              _responseFuture.whenComplete(new BiConsumer[findStudentsByClass_result, Throwable]{

              override def accept(r: findStudentsByClass_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          
            /**
            * 
            **/
            def findStudentRowsByClass(classId:String , timeout: Long) : scala.concurrent.Future[List[com.today36524.schoolsoa.bean.StudentInfo]] = {

            initContext("findStudentRowsByClass");

            try {
              val _responseFuture = sendBaseAsync(findStudentRowsByClass_args(classId), new FindStudentRowsByClass_argsSerializer(), new FindStudentRowsByClass_resultSerializer(), timeout).asInstanceOf[java.util.concurrent.CompletableFuture[findStudentRowsByClass_result]]

              val promise = Promise[List[com.today36524.schoolsoa.bean.StudentInfo]]()

              _responseFuture.whenComplete(new BiConsumer[findStudentRowsByClass_result, Throwable]{

              override def accept(r: findStudentRowsByClass_result, e: Throwable): Unit = {
                if(e != null)
                  promise.failure(e)
                else
                  promise.success(r.success)
                }
              })
              promise.future
            }catch{
              case e: SoaException => throw e
              case e: TException => throw new SoaException(e)
            }finally {
              destoryContext()
            }
          }
          

      }
      