 package com.today36524.schoolsoa.bean.serializer;

        import com.today36524.schoolsoa.bean.serializer._;
        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/

        class StudentInfoSerializer extends TCommonBeanSerializer[com.today36524.schoolsoa.bean.StudentInfo]{
          
      @throws[TException]
      override def read(iprot: TProtocol): com.today36524.schoolsoa.bean.StudentInfo = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: String = null
        var name: String = null
        var sex: String = null
        var sex_cn: String = null
        var class_id: String = null
        var yuwen: Int = 0
        var shuxue: Int = 0
        var yingyu: Int = 0
        var total: Int = 0
        var average: Int = 0
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => id = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 2 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => name = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 3 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => sex = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 4 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => sex_cn = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 5 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => class_id = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 6 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => yuwen = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 7 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => shuxue = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 8 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => yingyu = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 9 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => total = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
              case 10 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.I32 => average = iprot.readI32
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = com.today36524.schoolsoa.bean.StudentInfo(id = id,name = name,sex = sex,sex_cn = sex_cn,class_id = class_id,yuwen = yuwen,shuxue = shuxue,yingyu = yingyu,total = total,average = average)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: com.today36524.schoolsoa.bean.StudentInfo, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("StudentInfo"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.STRING, 1.asInstanceOf[Short]))
            oprot.writeString(elem0)
            oprot.writeFieldEnd
            
            }
            {
            val elem1 = bean.name 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("name", com.isuwang.org.apache.thrift.protocol.TType.STRING, 2.asInstanceOf[Short]))
            oprot.writeString(elem1)
            oprot.writeFieldEnd
            
            }
            {
            val elem2 = bean.sex 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("sex", com.isuwang.org.apache.thrift.protocol.TType.STRING, 3.asInstanceOf[Short]))
            oprot.writeString(elem2)
            oprot.writeFieldEnd
            
            }
            {
            val elem3 = bean.sex_cn 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("sex_cn", com.isuwang.org.apache.thrift.protocol.TType.STRING, 4.asInstanceOf[Short]))
            oprot.writeString(elem3)
            oprot.writeFieldEnd
            
            }
            {
            val elem4 = bean.class_id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("class_id", com.isuwang.org.apache.thrift.protocol.TType.STRING, 5.asInstanceOf[Short]))
            oprot.writeString(elem4)
            oprot.writeFieldEnd
            
            }
            {
            val elem5 = bean.yuwen 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("yuwen", com.isuwang.org.apache.thrift.protocol.TType.I32, 6.asInstanceOf[Short]))
            oprot.writeI32(elem5)
            oprot.writeFieldEnd
            
            }
            {
            val elem6 = bean.shuxue 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("shuxue", com.isuwang.org.apache.thrift.protocol.TType.I32, 7.asInstanceOf[Short]))
            oprot.writeI32(elem6)
            oprot.writeFieldEnd
            
            }
            {
            val elem7 = bean.yingyu 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("yingyu", com.isuwang.org.apache.thrift.protocol.TType.I32, 8.asInstanceOf[Short]))
            oprot.writeI32(elem7)
            oprot.writeFieldEnd
            
            }
            {
            val elem8 = bean.total 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("total", com.isuwang.org.apache.thrift.protocol.TType.I32, 9.asInstanceOf[Short]))
            oprot.writeI32(elem8)
            oprot.writeFieldEnd
            
            }
            {
            val elem9 = bean.average 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("average", com.isuwang.org.apache.thrift.protocol.TType.I32, 10.asInstanceOf[Short]))
            oprot.writeI32(elem9)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: com.today36524.schoolsoa.bean.StudentInfo): Unit = {
      
              if(bean.id == null)
              throw new SoaException(SoaBaseCode.NotNull, "id字段不允许为空")
            
              if(bean.name == null)
              throw new SoaException(SoaBaseCode.NotNull, "name字段不允许为空")
            
              if(bean.sex == null)
              throw new SoaException(SoaBaseCode.NotNull, "sex字段不允许为空")
            
              if(bean.sex_cn == null)
              throw new SoaException(SoaBaseCode.NotNull, "sex_cn字段不允许为空")
            
              if(bean.class_id == null)
              throw new SoaException(SoaBaseCode.NotNull, "class_id字段不允许为空")
            
    }
    

          @throws[TException]
          override def toString(bean: com.today36524.schoolsoa.bean.StudentInfo): String = if (bean == null) "null" else bean.toString

        }
        
      