package com.today36524.schoolsoa
        import com.today36524.schoolsoa.bean.serializer._;

        import com.isuwang.dapeng.core._
        import com.isuwang.org.apache.thrift._
        import com.isuwang.org.apache.thrift.protocol._

        /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        object ClassServiceCodec {

        
            case class findClassById_args(id:String)

            case class findClassById_result(success:com.today36524.schoolsoa.bean.Clazz)

            class FindClassById_argsSerializer extends TCommonBeanSerializer[findClassById_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findClassById_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var id: String = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => id = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findClassById_args(id = id)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findClassById_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findClassById_args"))

      
            {
            val elem0 = bean.id 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("id", com.isuwang.org.apache.thrift.protocol.TType.STRING, 1.asInstanceOf[Short]))
            oprot.writeString(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findClassById_args): Unit = {
      
              if(bean.id == null)
              throw new SoaException(SoaBaseCode.NotNull, "id字段不允许为空")
            
    }
    

            override def toString(bean: findClassById_args): String = if(bean == null)  "null" else bean.toString
            }

            class FindClassById_resultSerializer extends TCommonBeanSerializer[findClassById_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findClassById_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : com.today36524.schoolsoa.bean.Clazz = null

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.STRUCT =>  success = new com.today36524.schoolsoa.bean.serializer.ClazzSerializer().read(iprot)
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findClassById_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findClassById_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findClassById_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRUCT, 0.asInstanceOf[Short]))
             new com.today36524.schoolsoa.bean.serializer.ClazzSerializer().write(elem0, oprot)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findClassById_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
                if(bean.success != null)
                new com.today36524.schoolsoa.bean.serializer.ClazzSerializer().validate(bean.success)
              
    }
    

            override def toString(bean: findClassById_result): String = if(bean == null)  "null" else bean.toString
          }

            class findClassById extends SoaProcessFunction[com.today36524.schoolsoa.service.ClassService, findClassById_args, findClassById_result, FindClassById_argsSerializer,  FindClassById_resultSerializer]("findClassById", new FindClassById_argsSerializer(), new FindClassById_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: findClassById_args = null


            @throws[TException]
            def getResult(iface: com.today36524.schoolsoa.service.ClassService, args: findClassById_args):findClassById_result = {

              val _result = iface.findClassById(args.id)
              findClassById_result(_result )
            }
          }
          
            case class findClassesByGrade_args(gradeId:String)

            case class findClassesByGrade_result(success:List[com.today36524.schoolsoa.bean.Clazz])

            class FindClassesByGrade_argsSerializer extends TCommonBeanSerializer[findClassesByGrade_args]{
            
      @throws[TException]
      override def read(iprot: TProtocol): findClassesByGrade_args = {

        var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
        iprot.readStructBegin()

      var gradeId: String = null
        

      while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
          
              case 1 =>
                  schemeField.`type` match {
                    case com.isuwang.org.apache.thrift.protocol.TType.STRING => gradeId = iprot.readString
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
            }
            
          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
      }

      iprot.readFieldEnd
      iprot.readStructEnd

      val bean = findClassesByGrade_args(gradeId = gradeId)
      validate(bean)

      bean
      }
    
      @throws[TException]
      override def write(bean: findClassesByGrade_args, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findClassesByGrade_args"))

      
            {
            val elem0 = bean.gradeId 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("gradeId", com.isuwang.org.apache.thrift.protocol.TType.STRING, 1.asInstanceOf[Short]))
            oprot.writeString(elem0)
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
      @throws[TException]
      override def validate(bean: findClassesByGrade_args): Unit = {
      
              if(bean.gradeId == null)
              throw new SoaException(SoaBaseCode.NotNull, "gradeId字段不允许为空")
            
    }
    

            override def toString(bean: findClassesByGrade_args): String = if(bean == null)  "null" else bean.toString
            }

            class FindClassesByGrade_resultSerializer extends TCommonBeanSerializer[findClassesByGrade_result]{

            @throws[TException]
            override def read(iprot: TProtocol): findClassesByGrade_result = {

              var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null
              iprot.readStructBegin

              var success : List[com.today36524.schoolsoa.bean.Clazz] = List.empty

              while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {

                schemeField = iprot.readFieldBegin

                schemeField.id match {
                    case 0 =>
                       schemeField.`type` match {
                          case com.isuwang.org.apache.thrift.protocol.TType.LIST =>  success = {
        val _list0 : com.isuwang.org.apache.thrift.protocol.TList = iprot.readListBegin
        val _result0 = (0 until _list0.size).map(_ => {new com.today36524.schoolsoa.bean.serializer.ClazzSerializer().read(iprot)}).toList
        iprot.readListEnd
        _result0
        }
                          case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                  }
                    case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }

                iprot.readFieldEnd
              }

              iprot.readStructEnd
              val bean = findClassesByGrade_result(success)
              validate(bean)

              bean
            }

            
      @throws[TException]
      override def write(bean: findClassesByGrade_result, oprot: TProtocol): Unit = {

      validate(bean)
      oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("findClassesByGrade_result"))

      
            {
            val elem0 = bean.success 
            oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.LIST, 0.asInstanceOf[Short]))
            
        oprot.writeListBegin(new com.isuwang.org.apache.thrift.protocol.TList(com.isuwang.org.apache.thrift.protocol.TType.STRUCT, elem0.size))
        elem0.foreach(elem1 => { new com.today36524.schoolsoa.bean.serializer.ClazzSerializer().write(elem1, oprot)})
        oprot.writeListEnd
      
            oprot.writeFieldEnd
            
            }
      oprot.writeFieldStop
      oprot.writeStructEnd
    }
    
            
      @throws[TException]
      override def validate(bean: findClassesByGrade_result): Unit = {
      
              if(bean.success == null)
              throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
            
    }
    

            override def toString(bean: findClassesByGrade_result): String = if(bean == null)  "null" else bean.toString
          }

            class findClassesByGrade extends SoaProcessFunction[com.today36524.schoolsoa.service.ClassService, findClassesByGrade_args, findClassesByGrade_result, FindClassesByGrade_argsSerializer,  FindClassesByGrade_resultSerializer]("findClassesByGrade", new FindClassesByGrade_argsSerializer(), new FindClassesByGrade_resultSerializer()){

            override def isOneway: Boolean = false

            override def getEmptyArgsInstance: findClassesByGrade_args = null


            @throws[TException]
            def getResult(iface: com.today36524.schoolsoa.service.ClassService, args: findClassesByGrade_args):findClassesByGrade_result = {

              val _result = iface.findClassesByGrade(args.gradeId)
              findClassesByGrade_result(_result )
            }
          }
          

        case class getServiceMetadata_args()

        case class getServiceMetadata_result(success: String)

        class GetServiceMetadata_argsSerializer extends TCommonBeanSerializer[getServiceMetadata_args] {

          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_args = {

            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin
              com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              iprot.readFieldEnd
            }

            iprot.readStructEnd

            val bean = getServiceMetadata_args()
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_args): Unit = {}

          override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
        }



        class GetServiceMetadata_resultSerializer extends TCommonBeanSerializer[getServiceMetadata_result] {
          @throws[TException]
          override def read(iprot: TProtocol): getServiceMetadata_result = {
            iprot.readStructBegin

            var schemeField: com.isuwang.org.apache.thrift.protocol.TField = null

            var success: String = null

            while (schemeField == null || schemeField.`type` != com.isuwang.org.apache.thrift.protocol.TType.STOP) {
              schemeField = iprot.readFieldBegin

              schemeField.id match {
                case 0 =>
                schemeField.`type` match {
                  case com.isuwang.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
                  case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
                }
                case _ => com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
              }
              iprot.readFieldEnd
            }

            iprot.readStructEnd
            val bean = getServiceMetadata_result(success)
            validate(bean)

            bean
          }

          @throws[TException]
          override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
            validate(bean)
            oproto.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

            oproto.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("success", com.isuwang.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
            oproto.writeString(bean.success)
            oproto.writeFieldEnd

            oproto.writeFieldStop
            oproto.writeStructEnd
          }

          @throws[TException]
          override def validate(bean: getServiceMetadata_result): Unit = {
            if (bean.success == null)
            throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
          }

          override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

        }



  class getServiceMetadata extends SoaProcessFunction[com.today36524.schoolsoa.service.ClassService, getServiceMetadata_args, getServiceMetadata_result, GetServiceMetadata_argsSerializer, GetServiceMetadata_resultSerializer](
  "getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {

      override def isOneway: Boolean = false

      override def getEmptyArgsInstance: getServiceMetadata_args = getServiceMetadata_args()

      @throws[TException]
      override def getResult(iface: com.today36524.schoolsoa.service.ClassService, args: getServiceMetadata_args): getServiceMetadata_result = {

        val source = scala.io.Source.fromInputStream(ClassServiceCodec.getClass.getClassLoader.getResourceAsStream("com.today36524.schoolsoa.service.ClassService.xml"))
        val success = source.mkString
        source.close
        getServiceMetadata_result(success)
      }
      }

      class Processor(iface: com.today36524.schoolsoa.service.ClassService) extends SoaCommonBaseProcessor(iface, Processor.getProcessMap)

        object Processor{

          type PF = SoaProcessFunction[com.today36524.schoolsoa.service.ClassService, _, _, _ <: TCommonBeanSerializer[_], _ <: TCommonBeanSerializer[_]]

          def getProcessMap(): java.util.Map[String, PF] = {
             val map = new java.util.HashMap[String, PF]()
            map.put("findClassById", new findClassById)
              map.put("findClassesByGrade", new findClassesByGrade)
              
            map.put("getServiceMetadata", new getServiceMetadata)
            map
          }

        }
        }
      